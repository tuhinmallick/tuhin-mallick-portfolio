[
  {
    "name": "route.js",
    "path": "app/api/medium-posts/route.js",
    "content": {
      "structured": {
        "description": "An API endpoint that fetches Medium articles from a user's profile using the RapidAPI unofficial Medium API and then formats the posts for storage in a blob storage using Next.js. The endpoint makes four requests: one to get the user ID, another to retrieve article IDs, a third to fetch article details, and a fourth to format the posts into JSON strings for storage.",
        "items": [
          {
            "id": "92c5dc91-9664-17a1-6444-7038425dca0e",
            "ancestors": [],
            "description": "Saves a list of posts to JSON files in a storage system, assigning each post a unique filename based on its index. The files are set to public access and do not have a random suffix.",
            "params": [
              {
                "name": "posts",
                "default_value": null,
                "optional": false,
                "type_name": "any[]",
                "description": "An array of posts to be saved to storage."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "savePostsToStorage([\n    {title: 'Post 1', content: 'This is post one.'},\n    {title: 'Post 2', content: 'This is post two.'}\n]);\n",
              "description": ""
            },
            "name": "savePostsToStorage",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "095b8263-56c3-b28d-824f-9da0c4cf4caf",
            "ancestors": [],
            "description": "Retrieves a user's articles from the unofficial Medium API, extracts article details, and formats them into a JSON response. It also saves the formatted posts to storage and returns a success message if successful, or an error message with details if there is an issue.",
            "params": [
              {
                "name": "request",
                "default_value": null,
                "optional": false,
                "type_name": "Request",
                "description": "Used to handle HTTP requests."
              }
            ],
            "returns": {
              "type_name": "any",
              "description": "A JSON object containing two properties: `message` and `posts`. The `message` property has a string value indicating success or failure, while the `posts` property contains an array of formatted posts."
            },
            "usage": {
              "language": "javascript",
              "code": "GET('/medium-api', {\n    method: 'GET',\n});\n",
              "description": ""
            },
            "name": "GET",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 92,
            "docLength": null
          },
          {
            "id": "d0ed889c-4f7e-3b9f-a948-914f1dbb02a3",
            "ancestors": [
              "095b8263-56c3-b28d-824f-9da0c4cf4caf"
            ],
            "description": "Formats posts.",
            "name": null,
            "location": {
              "start": 85,
              "insert": 86,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "fetchMediumPosts.js",
    "path": "utlis/fetchMediumPosts.js",
    "content": {
      "structured": {
        "description": "An asynchronous function fetchMediumPosts that retrieves Medium posts from the API using Axios. It sends a GET request to the Medium API with authentication via an access token and specific headers, and maps the response data into a list of objects containing post metadata such as ID, date, author, title, image source, and delay.",
        "items": [
          {
            "id": "43c3973a-922f-1ba1-6944-2081fb9e237f",
            "ancestors": [],
            "description": "Retrieves a list of Medium posts from the Medium API and converts them into an array of objects containing post ID, date, author name, title, image source, and delay. It handles errors by logging them to the console and throwing a custom error.",
            "params": [],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects. Each object represents a medium post and has properties such as id, date, author, title, imageSrc, delay."
            },
            "usage": {
              "language": "javascript",
              "code": "fetchMediumPosts().then((posts) => {\n  posts.forEach(post => console.log(post));\n});\n",
              "description": ""
            },
            "name": "fetchMediumPosts",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 26,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "BlogAnimation.jsx",
    "path": "components/blog/BlogAnimation.jsx",
    "content": {
      "structured": {
        "description": "A React component named \"News\" that displays a grid of blog posts with images and metadata, allowing users to click on each post to open a modal window for more details. The modal window is implemented using React-Modal, and it includes an image, title, author, date, and content dynamically loaded from the blogPosts array.",
        "items": [
          {
            "id": "408302a0-87dd-6eb5-9f4c-f043ec69e9e6",
            "ancestors": [],
            "description": "Renders a list of blog posts with images and details, and provides an option to open a modal window displaying a selected post's content when its corresponding image is clicked.",
            "params": [],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a news page containing a grid of blog posts with modal details for each post."
            },
            "usage": {
              "language": "javascript",
              "code": "function App() {\n  return <News blogPosts={[{imageSrc: 'test.jpg', title: 'Test1', author: 'Author1', date: '2022-01-01'}, {imageSrc: 'test2.jpg', title: 'Test2', author: 'Author2', date: '2022-02-02'}]} />;\n}\n",
              "description": ""
            },
            "name": "News",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "ccb04575-3f6b-83a4-e44a-0d7f76b09765",
            "ancestors": [
              "408302a0-87dd-6eb5-9f4c-f043ec69e9e6"
            ],
            "description": "Toggles the value of the `isOpen` variable between true and false, effectively opening or closing a modal window depending on its current state.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "toggleModalOne();\n// some other operations...\nsetTimeout(toggleModalOne, 5000);\n",
              "description": ""
            },
            "name": "toggleModalOne",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "ResumeAnimation.jsx",
    "path": "components/resume/ResumeAnimation.jsx",
    "content": {
      "structured": {
        "description": "A React component called Resume that displays an individual's work experience and education in a formatted layout. The code utilizes a Skills component from a separate module (Skills) to display skills information. It also employs AOS (Animate on Scroll) for adding animations to elements when scrolling into view.",
        "items": [
          {
            "id": "6c632076-0b50-a09c-884c-a1652ca6d03f",
            "ancestors": [],
            "description": "Renders a resume section with two parts: experience and education & skills. It maps through arrays of objects to display job experiences, educational details, and skills in separate sections using React components and CSS styling.",
            "params": [],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a section of an individual's resume, including experience and education information."
            },
            "usage": {
              "language": "javascript",
              "code": "const resumeContent = [\n    {\n        jobPosition: \"Software Engineer\",\n        jobType: \"Full-time\",\n        jobDuration: \"2020-2022\",\n        timeDuraton: \"1 year and 6 months\"\n    },\n    {\n        jobPosition: \"Junior Developer\",\n        jobType: \"Part-time\",\n        jobDuration: \"2018-2020\",\n        timeDuraton: \"2 years\"\n    }\n];\n\nconst educatonContent = [\n    {\n        passingYear: \"2022\",\n        degreeTitle: \"Bachelor of Science in Computer Science\",\n        instituteName: \"University of California, Los Angeles\",\n        courseLink: \"#\",\n        instituteLink: \"#\"\n    }\n];\n\nconst resumeElement = <Resume resumeContent={resumeContent} educatonContent={educatonContent}/>;\n",
              "description": ""
            },
            "name": "Resume",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 95,
            "docLength": null
          }
        ]
      }
    }
  }
]