[
  {
    "name": "route.js",
    "path": "app/api/medium-posts/route.js",
    "content": {
      "structured": {
        "description": "A Next.js API endpoint that fetches user articles from Medium using the unofficial Medium API and saves them to storage in JSON format. The endpoint uses Axios for HTTP requests, Vercel's Blob API for storing files, and the `@vercel/blob` package for interacting with the Blob API.",
        "items": [
          {
            "id": "54465953-dabd-4893-ea45-8a5b155e9445",
            "ancestors": [],
            "description": "Saves a list of posts to storage, serializing each post as a JSON file with a unique filename based on an incrementing index. The files are stored publicly and without random suffixes.",
            "params": [
              {
                "name": "posts",
                "default_value": null,
                "optional": false,
                "type_name": "(object)[]",
                "description": "Used to store multiple posts into storage."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "savePostsToStorage([\n    {title: 'Post One', content: 'This is post one'},\n    {title: 'Post Two', content: 'This is post two'}\n]);\n",
              "description": ""
            },
            "name": "savePostsToStorage",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "e86d685d-2bef-f694-2c4c-994d9156141e",
            "ancestors": [],
            "description": "Retrieves Medium articles for a given user, processes their details, and saves them to storage. It handles GET and POST requests, authenticates using RapidAPI and CRON_SECRET, and logs each step of the process.",
            "params": [
              {
                "name": "req",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Responsible for representing an incoming HTTP request."
              },
              {
                "name": "res",
                "default_value": null,
                "optional": false,
                "type_name": "Response",
                "description": "Used to return HTTP responses."
              }
            ],
            "returns": {
              "type_name": "Promise<jsonResponse>",
              "description": "A JSON response with two properties: `message` and `posts`, where `posts` contains an array of formatted Medium posts in JSON format."
            },
            "usage": {
              "language": "javascript",
              "code": "handler({ method: 'POST', headers: { authorization: `Bearer ${process.env.CRON_SECRET}` } }, res => {\n  if (res.status === 200) {\n    const posts = res.json().posts;\n    // Process and use the formatted posts here.\n  }\n});",
              "description": ""
            },
            "name": "handler",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "2b27e0df-87ed-e181-0e47-f217efd92c7c",
            "ancestors": [
              "e86d685d-2bef-f694-2c4c-994d9156141e"
            ],
            "description": "Formats blog posts.",
            "name": null,
            "location": {
              "start": 96,
              "insert": 97,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "fetchMediumPosts.js",
    "path": "utlis/fetchMediumPosts.js",
    "content": {
      "structured": {
        "description": "An asynchronous function fetchMediumPosts that retrieves Medium posts from the API using Axios. It sends a GET request to the Medium API with authentication via an access token and specific headers, and maps the response data into a list of objects containing post metadata such as ID, date, author, title, image source, and delay.",
        "items": [
          {
            "id": "43c3973a-922f-1ba1-6944-2081fb9e237f",
            "ancestors": [],
            "description": "Retrieves a list of Medium posts from the Medium API and converts them into an array of objects containing post ID, date, author name, title, image source, and delay. It handles errors by logging them to the console and throwing a custom error.",
            "params": [],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects. Each object represents a medium post and has properties such as id, date, author, title, imageSrc, delay."
            },
            "usage": {
              "language": "javascript",
              "code": "fetchMediumPosts().then((posts) => {\n  posts.forEach(post => console.log(post));\n});\n",
              "description": ""
            },
            "name": "fetchMediumPosts",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 26,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "BlogAnimation.jsx",
    "path": "components/blog/BlogAnimation.jsx",
    "content": {
      "structured": {
        "description": "A React component named \"News\" that displays a grid of blog posts with images and metadata, allowing users to click on each post to open a modal window for more details. The modal window is implemented using React-Modal, and it includes an image, title, author, date, and content dynamically loaded from the blogPosts array.",
        "items": [
          {
            "id": "408302a0-87dd-6eb5-9f4c-f043ec69e9e6",
            "ancestors": [],
            "description": "Renders a list of blog posts with images and details, and provides an option to open a modal window displaying a selected post's content when its corresponding image is clicked.",
            "params": [],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a news page containing a grid of blog posts with modal details for each post."
            },
            "usage": {
              "language": "javascript",
              "code": "function App() {\n  return <News blogPosts={[{imageSrc: 'test.jpg', title: 'Test1', author: 'Author1', date: '2022-01-01'}, {imageSrc: 'test2.jpg', title: 'Test2', author: 'Author2', date: '2022-02-02'}]} />;\n}\n",
              "description": ""
            },
            "name": "News",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "ccb04575-3f6b-83a4-e44a-0d7f76b09765",
            "ancestors": [
              "408302a0-87dd-6eb5-9f4c-f043ec69e9e6"
            ],
            "description": "Toggles the value of the `isOpen` variable between true and false, effectively opening or closing a modal window depending on its current state.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "toggleModalOne();\n// some other operations...\nsetTimeout(toggleModalOne, 5000);\n",
              "description": ""
            },
            "name": "toggleModalOne",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]