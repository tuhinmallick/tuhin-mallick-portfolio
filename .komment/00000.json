[
  {
    "name": "route.js",
    "path": "app/api/medium-posts/route.js",
    "content": {
      "structured": {
        "description": "An API endpoint that fetches articles from Medium using an unofficial API, formats them into a specific structure, and saves them to storage. The API uses axios to make requests to the Medium API, and vercel/blob to store the formatted posts. It also includes error handling and authentication checks to ensure authorized access.",
        "items": [
          {
            "id": "a85f3e88-eed1-1ea1-ba4e-916b25894a7c",
            "ancestors": [],
            "description": "Serializes a list of `posts` into JSON files, naming each file based on its index (starting from 1), and stores them in a storage medium with public access and no random suffix addition.",
            "params": [
              {
                "name": "posts",
                "default_value": null,
                "optional": false,
                "type_name": "any[]",
                "description": "Intended to hold an array of posts."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "savePostsToStorage([{title: 'Post 1', content: 'This is post 1'}, {title: 'Post 2', content: 'This is post 2'}]);\n",
              "description": ""
            },
            "name": "savePostsToStorage",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "1d1d6264-6c7a-45b3-d249-30f47e8143ce",
            "ancestors": [],
            "description": "Retrieves a user's articles from the Medium API, extracts relevant information such as article IDs, titles, and images, formats the data, and saves it to storage after verifying authentication through environment variables and HTTP headers.",
            "params": [
              {
                "name": "req",
                "default_value": null,
                "optional": false,
                "type_name": "any",
                "description": "An object representing the HTTP request made to the server."
              },
              {
                "name": "res",
                "default_value": null,
                "optional": false,
                "type_name": "Response",
                "description": "Responsible for sending HTTP responses to the client."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "A JSON response that includes either an error message and details if there was an error fetching Medium posts, or a success message and the formatted posts successfully fetched from Medium and saved to storage."
            },
            "usage": {
              "language": "javascript",
              "code": "const express = require('express');\nconst app = express();\napp.use(express.json());\napp.post('/medium-posts', handler);\n",
              "description": ""
            },
            "name": "handler",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 95,
            "docLength": null
          },
          {
            "id": "9eb5ca59-b5d9-6bab-1846-0273a041cc09",
            "ancestors": [
              "1d1d6264-6c7a-45b3-d249-30f47e8143ce"
            ],
            "description": "Formats posts data.",
            "name": null,
            "location": {
              "start": 88,
              "insert": 89,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "fetchMediumPosts.js",
    "path": "utlis/fetchMediumPosts.js",
    "content": {
      "structured": {
        "description": "An asynchronous function fetchMediumPosts that retrieves Medium posts from the API using Axios. It sends a GET request to the Medium API with authentication via an access token and specific headers, and maps the response data into a list of objects containing post metadata such as ID, date, author, title, image source, and delay.",
        "items": [
          {
            "id": "43c3973a-922f-1ba1-6944-2081fb9e237f",
            "ancestors": [],
            "description": "Retrieves a list of Medium posts from the Medium API and converts them into an array of objects containing post ID, date, author name, title, image source, and delay. It handles errors by logging them to the console and throwing a custom error.",
            "params": [],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects. Each object represents a medium post and has properties such as id, date, author, title, imageSrc, delay."
            },
            "usage": {
              "language": "javascript",
              "code": "fetchMediumPosts().then((posts) => {\n  posts.forEach(post => console.log(post));\n});\n",
              "description": ""
            },
            "name": "fetchMediumPosts",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 26,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "BlogAnimation.jsx",
    "path": "components/blog/BlogAnimation.jsx",
    "content": {
      "structured": {
        "description": "A React component named \"News\" that displays a grid of blog posts with images and metadata, allowing users to click on each post to open a modal window for more details. The modal window is implemented using React-Modal, and it includes an image, title, author, date, and content dynamically loaded from the blogPosts array.",
        "items": [
          {
            "id": "408302a0-87dd-6eb5-9f4c-f043ec69e9e6",
            "ancestors": [],
            "description": "Renders a list of blog posts with images and details, and provides an option to open a modal window displaying a selected post's content when its corresponding image is clicked.",
            "params": [],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a news page containing a grid of blog posts with modal details for each post."
            },
            "usage": {
              "language": "javascript",
              "code": "function App() {\n  return <News blogPosts={[{imageSrc: 'test.jpg', title: 'Test1', author: 'Author1', date: '2022-01-01'}, {imageSrc: 'test2.jpg', title: 'Test2', author: 'Author2', date: '2022-02-02'}]} />;\n}\n",
              "description": ""
            },
            "name": "News",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "ccb04575-3f6b-83a4-e44a-0d7f76b09765",
            "ancestors": [
              "408302a0-87dd-6eb5-9f4c-f043ec69e9e6"
            ],
            "description": "Toggles the value of the `isOpen` variable between true and false, effectively opening or closing a modal window depending on its current state.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "toggleModalOne();\n// some other operations...\nsetTimeout(toggleModalOne, 5000);\n",
              "description": ""
            },
            "name": "toggleModalOne",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]