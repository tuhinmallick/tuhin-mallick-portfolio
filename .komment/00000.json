[
  {
    "name": "route.js",
    "path": "app/api/medium-posts/route.js",
    "content": {
      "structured": {
        "description": "An Next.js API endpoint that fetches Medium articles for a given user and saves them to storage as JSON files. It uses Axios to make requests to the unofficial Medium API and RapidAPI to fetch article details. The code formats the posts by extracting metadata from HTML content, such as title, author, published date, image source, and content, before saving them to storage using the `put` method of the `@vercel/blob` package.",
        "items": [
          {
            "id": "4610873f-2d2d-929d-0b4f-b62d135a3135",
            "ancestors": [],
            "description": "Iterates over an array of posts, serializes each post to JSON, and saves it to a file with a specific naming convention. The files are made publicly accessible without random suffixes.",
            "params": [
              {
                "name": "posts",
                "default_value": null,
                "optional": false,
                "type_name": "any[]",
                "description": "Required to save posts to storage."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "savePostsToStorage([{ title: 'Post 1', content: 'Content of post 1' }, { title: 'Post 2', content: 'Content of post 2'}]);",
              "description": ""
            },
            "name": "savePostsToStorage",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "05c73afd-13c0-a1aa-2841-011e38c2a92e",
            "ancestors": [],
            "description": "Retrieves a user's articles from the unofficial Medium API, extracts article details, formats the data, and saves it to storage. It handles errors and returns an HTTP response with the formatted posts or error message.",
            "params": [
              {
                "name": "req",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Used to represent the HTTP request being processed."
              },
              {
                "name": "res",
                "default_value": null,
                "optional": false,
                "type_name": "Response",
                "description": "Responsible for sending responses to clients."
              }
            ],
            "returns": {
              "type_name": "json",
              "description": "An object containing two properties - \"message\" and \"posts\". The \"message\" property holds a string indicating success or failure of post formatting and saving operation. The \"posts\" property holds an array of formatted posts."
            },
            "usage": {
              "language": "javascript",
              "code": "handler({ method: 'GET', url: '/' }, {\n  json: (result) => console.log(result)\n});\n",
              "description": ""
            },
            "name": "handler",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 97,
            "docLength": null
          },
          {
            "id": "abf7bc96-c0b5-93a1-8247-9e49ca6df6c4",
            "ancestors": [
              "05c73afd-13c0-a1aa-2841-011e38c2a92e"
            ],
            "description": "Formats blog posts.",
            "name": null,
            "location": {
              "start": 90,
              "insert": 91,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "fetchMediumPosts.js",
    "path": "utlis/fetchMediumPosts.js",
    "content": {
      "structured": {
        "description": "An asynchronous function fetchMediumPosts that retrieves Medium posts from the API using Axios. It sends a GET request to the Medium API with authentication via an access token and specific headers, and maps the response data into a list of objects containing post metadata such as ID, date, author, title, image source, and delay.",
        "items": [
          {
            "id": "43c3973a-922f-1ba1-6944-2081fb9e237f",
            "ancestors": [],
            "description": "Retrieves a list of Medium posts from the Medium API and converts them into an array of objects containing post ID, date, author name, title, image source, and delay. It handles errors by logging them to the console and throwing a custom error.",
            "params": [],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects. Each object represents a medium post and has properties such as id, date, author, title, imageSrc, delay."
            },
            "usage": {
              "language": "javascript",
              "code": "fetchMediumPosts().then((posts) => {\n  posts.forEach(post => console.log(post));\n});\n",
              "description": ""
            },
            "name": "fetchMediumPosts",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 26,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "BlogAnimation.jsx",
    "path": "components/blog/BlogAnimation.jsx",
    "content": {
      "structured": {
        "description": "A React component named \"News\" that displays a grid of blog posts with images and metadata, allowing users to click on each post to open a modal window for more details. The modal window is implemented using React-Modal, and it includes an image, title, author, date, and content dynamically loaded from the blogPosts array.",
        "items": [
          {
            "id": "408302a0-87dd-6eb5-9f4c-f043ec69e9e6",
            "ancestors": [],
            "description": "Renders a list of blog posts with images and details, and provides an option to open a modal window displaying a selected post's content when its corresponding image is clicked.",
            "params": [],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a news page containing a grid of blog posts with modal details for each post."
            },
            "usage": {
              "language": "javascript",
              "code": "function App() {\n  return <News blogPosts={[{imageSrc: 'test.jpg', title: 'Test1', author: 'Author1', date: '2022-01-01'}, {imageSrc: 'test2.jpg', title: 'Test2', author: 'Author2', date: '2022-02-02'}]} />;\n}\n",
              "description": ""
            },
            "name": "News",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "ccb04575-3f6b-83a4-e44a-0d7f76b09765",
            "ancestors": [
              "408302a0-87dd-6eb5-9f4c-f043ec69e9e6"
            ],
            "description": "Toggles the value of the `isOpen` variable between true and false, effectively opening or closing a modal window depending on its current state.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "toggleModalOne();\n// some other operations...\nsetTimeout(toggleModalOne, 5000);\n",
              "description": ""
            },
            "name": "toggleModalOne",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]