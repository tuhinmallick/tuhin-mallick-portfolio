[
  {
    "name": "route.js",
    "path": "app/api/medium-posts/route.js",
    "content": {
      "structured": {
        "description": "Two server-side handlers for the Next.js API route: one that fetches and saves user posts from Medium, and another that returns a success message indicating the API is working. The code utilizes Axios to make HTTP requests to the unofficial Medium API, JSON.stringify to convert data into JSON format, and put function to save the posts to Vercel Blob Storage.",
        "items": [
          {
            "id": "2a4c2aa1-0542-979d-2048-176240b4838d",
            "ancestors": [],
            "description": "Receives a request (`req`) and sends a response (`res`). It logs the request method and URL to the console, then returns a JSON response with a success message indicating that the API is functioning correctly.",
            "params": [
              {
                "name": "req",
                "default_value": null,
                "optional": false,
                "type_name": "Request | IncomingMessage",
                "description": "Used to receive the incoming HTTP request."
              },
              {
                "name": "res",
                "default_value": null,
                "optional": false,
                "type_name": "Response",
                "description": "Responsible for sending responses to HTTP requests."
              }
            ],
            "usage": null,
            "name": "handler",
            "location": {
              "start": 113,
              "insert": 113,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "fetchMediumPosts.js",
    "path": "utlis/fetchMediumPosts.js",
    "content": {
      "structured": {
        "description": "An asynchronous function fetchMediumPosts that retrieves Medium posts from the API using Axios. It sends a GET request to the Medium API with authentication via an access token and specific headers, and maps the response data into a list of objects containing post metadata such as ID, date, author, title, image source, and delay.",
        "items": [
          {
            "id": "43c3973a-922f-1ba1-6944-2081fb9e237f",
            "ancestors": [],
            "description": "Retrieves a list of Medium posts from the Medium API and converts them into an array of objects containing post ID, date, author name, title, image source, and delay. It handles errors by logging them to the console and throwing a custom error.",
            "params": [],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects. Each object represents a medium post and has properties such as id, date, author, title, imageSrc, delay."
            },
            "usage": {
              "language": "javascript",
              "code": "fetchMediumPosts().then((posts) => {\n  posts.forEach(post => console.log(post));\n});\n",
              "description": ""
            },
            "name": "fetchMediumPosts",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 26,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "BlogAnimation.jsx",
    "path": "components/blog/BlogAnimation.jsx",
    "content": {
      "structured": {
        "description": "A React component named \"News\" that displays a grid of blog posts with images and metadata, allowing users to click on each post to open a modal window for more details. The modal window is implemented using React-Modal, and it includes an image, title, author, date, and content dynamically loaded from the blogPosts array.",
        "items": [
          {
            "id": "408302a0-87dd-6eb5-9f4c-f043ec69e9e6",
            "ancestors": [],
            "description": "Renders a list of blog posts with images and details, and provides an option to open a modal window displaying a selected post's content when its corresponding image is clicked.",
            "params": [],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a news page containing a grid of blog posts with modal details for each post."
            },
            "usage": {
              "language": "javascript",
              "code": "function App() {\n  return <News blogPosts={[{imageSrc: 'test.jpg', title: 'Test1', author: 'Author1', date: '2022-01-01'}, {imageSrc: 'test2.jpg', title: 'Test2', author: 'Author2', date: '2022-02-02'}]} />;\n}\n",
              "description": ""
            },
            "name": "News",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "ccb04575-3f6b-83a4-e44a-0d7f76b09765",
            "ancestors": [
              "408302a0-87dd-6eb5-9f4c-f043ec69e9e6"
            ],
            "description": "Toggles the value of the `isOpen` variable between true and false, effectively opening or closing a modal window depending on its current state.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "toggleModalOne();\n// some other operations...\nsetTimeout(toggleModalOne, 5000);\n",
              "description": ""
            },
            "name": "toggleModalOne",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]