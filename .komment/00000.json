[
  {
    "name": "route.js",
    "path": "app/api/medium-posts/route.js",
    "content": {
      "structured": {
        "description": "An API endpoint using Next.js that fetches posts from Medium using the unofficial Medium API and RapidAPI, formats the data into a custom structure, and saves it to Vercel's Blob Storage. The code utilizes axios for HTTP requests and `@vercel/blob` to interact with storage.",
        "items": [
          {
            "id": "f5d32158-7d4e-16b7-c145-72813348ccb9",
            "ancestors": [],
            "description": "Serializes a list of posts into JSON files and saves them to storage, using incremental filenames starting from \"post-1.json\", with each file being publicly accessible and having no random suffix added.",
            "params": [
              {
                "name": "posts",
                "default_value": null,
                "optional": false,
                "type_name": "(object)[]",
                "description": "Expected to be an array of posts objects."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "savePostsToStorage([\n  {title: 'Post One', content: 'This is the first post'},\n  {title: 'Post Two', content: 'This is the second post'}\n]);\n",
              "description": ""
            },
            "name": "savePostsToStorage",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "bed9d72f-f621-5490-0b42-1083c41fbb66",
            "ancestors": [],
            "description": "Retrieves articles from a user's Medium account using an unofficial API, extracts relevant information such as title, author, and image URL, formats the data into a JSON object, saves it to storage, and returns a success response with the formatted posts.",
            "params": [
              {
                "name": "req",
                "default_value": null,
                "optional": false,
                "type_name": "http.IncomingMessage",
                "description": "Passed to the handler for an HTTP request."
              },
              {
                "name": "res",
                "default_value": null,
                "optional": false,
                "type_name": "Response",
                "description": "Used to send the response back to the client."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "JSON data containing a message and an array of formatted posts, with a status code of either 200 (success) or 500 (error)."
            },
            "usage": {
              "language": "javascript",
              "code": "const express = require('express');\nconst app = express();\n\napp.get('/medium', handler);\n",
              "description": ""
            },
            "name": "handler",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 91,
            "docLength": null
          },
          {
            "id": "57c0d0e1-81d7-5b80-4346-4096453e0bbd",
            "ancestors": [
              "bed9d72f-f621-5490-0b42-1083c41fbb66"
            ],
            "description": "Formats and processes an array of blog posts.",
            "name": null,
            "location": {
              "start": 84,
              "insert": 85,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 12,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "fetchMediumPosts.js",
    "path": "utlis/fetchMediumPosts.js",
    "content": {
      "structured": {
        "description": "An asynchronous function fetchMediumPosts that retrieves Medium posts from the API using Axios. It sends a GET request to the Medium API with authentication via an access token and specific headers, and maps the response data into a list of objects containing post metadata such as ID, date, author, title, image source, and delay.",
        "items": [
          {
            "id": "43c3973a-922f-1ba1-6944-2081fb9e237f",
            "ancestors": [],
            "description": "Retrieves a list of Medium posts from the Medium API and converts them into an array of objects containing post ID, date, author name, title, image source, and delay. It handles errors by logging them to the console and throwing a custom error.",
            "params": [],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects. Each object represents a medium post and has properties such as id, date, author, title, imageSrc, delay."
            },
            "usage": {
              "language": "javascript",
              "code": "fetchMediumPosts().then((posts) => {\n  posts.forEach(post => console.log(post));\n});\n",
              "description": ""
            },
            "name": "fetchMediumPosts",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 26,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "BlogAnimation.jsx",
    "path": "components/blog/BlogAnimation.jsx",
    "content": {
      "structured": {
        "description": "A React component named \"News\" that displays a grid of blog posts with images and metadata, allowing users to click on each post to open a modal window for more details. The modal window is implemented using React-Modal, and it includes an image, title, author, date, and content dynamically loaded from the blogPosts array.",
        "items": [
          {
            "id": "408302a0-87dd-6eb5-9f4c-f043ec69e9e6",
            "ancestors": [],
            "description": "Renders a list of blog posts with images and details, and provides an option to open a modal window displaying a selected post's content when its corresponding image is clicked.",
            "params": [],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a news page containing a grid of blog posts with modal details for each post."
            },
            "usage": {
              "language": "javascript",
              "code": "function App() {\n  return <News blogPosts={[{imageSrc: 'test.jpg', title: 'Test1', author: 'Author1', date: '2022-01-01'}, {imageSrc: 'test2.jpg', title: 'Test2', author: 'Author2', date: '2022-02-02'}]} />;\n}\n",
              "description": ""
            },
            "name": "News",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "ccb04575-3f6b-83a4-e44a-0d7f76b09765",
            "ancestors": [
              "408302a0-87dd-6eb5-9f4c-f043ec69e9e6"
            ],
            "description": "Toggles the value of the `isOpen` variable between true and false, effectively opening or closing a modal window depending on its current state.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "toggleModalOne();\n// some other operations...\nsetTimeout(toggleModalOne, 5000);\n",
              "description": ""
            },
            "name": "toggleModalOne",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]